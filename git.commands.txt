GIT
===
Git is version control software that alows multiple people to work on the same project
Github is the hosting software that hosts the project centrally across the network. There are other hosting solutions such as GitLab, GitBucket and many others

Git has a working directory that holds the files locally
These are held in a staging area
These are committed and include a commit history
you may have many commits and each commit acts as a save point
All the above is on the local machine, to store on the remote hosting server you need to use Git Push

Install
-------
when installing on windows install GitBash to keep the commands consistent across platforms
once installed open gitbash and confirm installed via
git --version
git --help

Setup
-----
to configure user info
git config --global user.name "your name"
git config --global user.email "you@mail.com"
git config --global color.ui auto

git config -l (shows current configuration)

Initialise
----------
A repository is a collection of various versions of a project
create a folder for a project eg 
mkdir pi_projects
cd pi_projects
git init . (initialises current directory)
you can now add files via git commands, git init is the first thing to do for a new project
it creates a .git folder, if you remove it via rm -rf .git it removes the repository so git commands no longer work until you run git init again

add files
---------
create a file via touch example.txt
git status (this shows changes made etc as wella s untracked files ie files not committed)

git add example.txt
now git status shows one change to commit

if you run 'git rm --cached example.txt' this removes he file from being staged
git status now shows that the change has now been cancelled

you can either git add filename or git add . to all files in the directory including all in subfolders
any files added are now staged

git add -A (this adds all files in the repository no matter where you are ie parent folder and downwards) 

commit
------
git commit -m "meaningful message"
a git status now shows no more commits waiting because files are no longer in the staging area

git log (this shows the commit hash, author, date, commit message)
git show <commit hash> shows all details of that commit

git diff shows file changes / added test etc ie the difference between what's committed and what hasnt been yet
files deleted can be restored with 'git restore filename'

if you want to change the message of the last commit
git commit --amend -m "more meaningful text"
git log will now show the updated message

push
----
git push takes a copy of the project to the repository on the remote hosting srver

create an account on github.com
create a repo , give it a name and make it either public or private
you can initialise the repo with a read me file OR if  importing a repo from the local machine then create  an empty repo

to push files from local machine to github
git remote add origin https://github.com/bigbadbunnyrabbit/pi_projects.git
git branch -M main
git push -u origin main
n.b. the master branch is now named main

During the push for the first time you will be prompted to either add ssh keys or use he oauth application via the browser for security

pull
----
copies github repo to local machine
eg add read.me file to github and commit to main branch
git pull will copy that new file back to local repo
 
branches
--------
so far all commits have been in the same branch. the default branch is master lately called main
a branch can represent a seperate line of development
git branch shows what branch you are on either locally or remote
eg
git branch (returns local branch --- main)
git branch -r (returns remote github branch --- origin/main)
git branch -a (shows all branches)

a new branch is a copy of a branch you can edit eg
git branch feature_a (create a new branch called feature_a with all the files frmo main to this point)
git checkout feature_a (switches to this branch)
git checkout main or git checkout - (switches to main branch)
when you are on a sub branch you add and commit files to it as normal
git push --set-upstream origin feature_a (pushes branch to github so the branch is visible there)
git branch -d branch 'name' (deletes branch 'name')


